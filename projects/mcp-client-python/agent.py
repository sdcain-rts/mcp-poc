import os
from langgraph import LangGraph
from openai import ChatCompletion
from modelcontext import MCPClient

class LangGraphAgent:
    """
    LangGraphAgent integrates GPT-4 with MCP tools to process user messages.
    """
    def __init__(self):
        # Load environment variables for API keys and MCP server URL
        self.openai_api_key = os.getenv("OPENAI_API_KEY")  # OpenAI API key
        self.mcp_python_url = os.getenv("MCP_PYTHON_URL")  # URL for the Python MCP server

        # Initialize the MCP client to interact with the MCP server
        self.mcp_client = MCPClient(base_url=self.mcp_python_url)

        # Initialize LangGraph with OpenAI API key and MCP tools
        self.langgraph = LangGraph(
            openai_api_key=self.openai_api_key,
            tools=[self.mcp_client]  # Add MCP client as a tool
        )

    def process_message(self, message: str) -> str:
        """
        Process a user message using LangGraph and GPT-4.
        - Passes the message to GPT-4 via LangGraph.
        - GPT-4 decides whether to call MCP tools.
        - Returns the final response generated by GPT-4.
        """
        response = self.langgraph.run(
            input_message=message,  # User input message
            model="gpt-4"  # Use GPT-4 for processing
        )
        return response