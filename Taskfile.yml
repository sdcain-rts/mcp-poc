version: '3'

includes:
  aws: ./Taskfile.aws.yml
  terraform: ./Taskfile.terraform.yml
  docker: ./Taskfile.docker.yml

tasks:
  default:
    cmds:
      - task -l
    desc: Lists all available tasks

  dev:setup:
    desc: Sets up the development environment
    cmds:
      - echo "Setting up development environment..."
      - direnv allow
    
  build:all:
    desc: Build all services
    deps: [docker:build]
    
  run:all:
    desc: Run all services
    deps: [docker:up]
    
  stop:all:
    desc: Stop all services
    deps: [docker:down]
    
  docs:serve:
    desc: Serve the documentation locally and open in browser
    cmds:
      - |
        # Start mkdocs server in background
        mkdocs serve --dev-addr=127.0.0.1:8000 &
        SERVER_PID=$!
        
        # Wait a moment for the server to start
        sleep 2
        
        # Open browser based on OS
        if [ "$(uname)" == "Darwin" ]; then
          # macOS
          open http://127.0.0.1:8000
        elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
          # Linux - try various commands
          xdg-open http://127.0.0.1:8000 || sensible-browser http://127.0.0.1:8000 || x-www-browser http://127.0.0.1:8000 || gnome-open http://127.0.0.1:8000 || echo "Please open http://127.0.0.1:8000 in your browser"
        elif [ "$(expr substr $(uname -s) 1 10)" == "MINGW32_NT" ] || [ "$(expr substr $(uname -s) 1 10)" == "MINGW64_NT" ]; then
          # Windows via Git Bash
          start http://127.0.0.1:8000 || echo "Please open http://127.0.0.1:8000 in your browser"
        else
          echo "Please open http://127.0.0.1:8000 in your browser"
        fi
        
        # Bring back server process to foreground
        wait $SERVER_PID
      
  docs:build:
    desc: Build the documentation site
    cmds:
      - mkdocs build
      
  docs:deploy:
    desc: Deploy the documentation to GitHub Pages
    cmds:
      - mkdocs gh-deploy --force
      
  # Frontend Tasks
  frontend:create:
    desc: Create a new frontend project
    cmds:
      - echo "Please specify a frontend type"
      
  frontend:create:react:
    desc: Create a new React frontend project
    cmds:
      - echo "Creating new React project"
      
  frontend:create:nextjs:
    desc: Create a new Next.js frontend project
    cmds:
      - echo "Creating new Next.js project"
      
  frontend:create:vue:
    desc: Create a new Vue frontend project
    cmds:
      - echo "Creating new Vue project"
      
  frontend:create:angular:
    desc: Create a new Angular frontend project
    cmds:
      - echo "Creating new Angular project"
      
  # Backend Tasks
  backend:create:
    desc: Create a new backend project
    cmds:
      - echo "Please specify a backend type"
      
  backend:create:fastapi:
    desc: Create a new FastAPI backend project
    cmds:
      - echo "Creating new FastAPI project"
      
  backend:create:nestjs:
    desc: Create a new NestJS backend project
    cmds:
      - echo "Creating new NestJS project"
      
  backend:create:spring:
    desc: Create a new Spring Boot backend project
    cmds:
      - echo "Creating new Spring Boot project"
      
  backend:create:express:
    desc: Create a new Express backend project
    cmds:
      - echo "Creating new Express project"
      
  # Database Tasks
  db:create:
    desc: Create a new database configuration
    cmds:
      - echo "Please specify a database type"
      
  db:create:postgres:
    desc: Create a PostgreSQL database configuration
    cmds:
      - echo "Creating PostgreSQL configuration"
      
  db:create:mongodb:
    desc: Create a MongoDB database configuration
    cmds:
      - echo "Creating MongoDB configuration"
      
  db:create:redis:
    desc: Create a Redis database configuration
    cmds:
      - echo "Creating Redis configuration"
      
  # Liquibase Tasks
  db:liquibase:init:
    desc: Initialize Liquibase for a project
    cmds:
      - echo "Initializing Liquibase"
      
  db:liquibase:new:
    desc: Create a new Liquibase migration
    cmds:
      - echo "Creating new migration"
      
  db:liquibase:update:
    desc: Apply Liquibase migrations
    cmds:
      - echo "Applying migrations"
      
  db:liquibase:rollback:
    desc: Roll back Liquibase migrations
    cmds:
      - echo "Rolling back migrations"
      
  # Infrastructure Tasks
  infra:create:
    desc: Create infrastructure templates
    cmds:
      - echo "Please specify a cloud provider"
      
  infra:create:aws:
    desc: Create AWS infrastructure templates
    cmds:
      - echo "Creating AWS infrastructure templates"
      
  infra:create:azure:
    desc: Create Azure infrastructure templates
    cmds:
      - echo "Creating Azure infrastructure templates"
      
  infra:create:gcp:
    desc: Create GCP infrastructure templates
    cmds:
      - echo "Creating GCP infrastructure templates"
      
  # Docker Tasks (custom environments)
  docker:create:dev:
    desc: Create development Docker Compose environment
    cmds:
      - echo "Creating development Docker environment"
      
  docker:create:prod:
    desc: Create production Docker Compose environment
    cmds:
      - echo "Creating production Docker environment"
      
  # Helper task for creating a full-stack application
  create:full-stack:
    desc: Create a full-stack AI application
    cmds:
      - echo "Creating full-stack application"
      - echo "Select options interactively..."